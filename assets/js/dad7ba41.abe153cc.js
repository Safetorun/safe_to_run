"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8777],{3905:function(e,r,t){t.d(r,{Zo:function(){return l},kt:function(){return g}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=n.createContext({}),p=function(e){var r=n.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},l=function(e){var r=p(e.components);return n.createElement(u.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},f=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),f=p(t),g=o,d=f["".concat(u,".").concat(g)]||f[g]||c[g]||a;return t?n.createElement(d,i(i({ref:r},l),{},{components:t})):n.createElement(d,i({ref:r},l))}));function g(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var s={};for(var u in r)hasOwnProperty.call(r,u)&&(s[u]=r[u]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}f.displayName="MDXCreateElement"},8471:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return l},default:function(){return f}});var n=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],s={id:"safetorunreporting",title:"Safe to run reporting",slug:"/safetorunreporting"},u=void 0,p={unversionedId:"reporting/safetorunreporting",id:"reporting/safetorunreporting",title:"Safe to run reporting",description:"Errors and Warns",source:"@site/docs/reporting/safe_to_run_reporting.md",sourceDirName:"reporting",slug:"/safetorunreporting",permalink:"/safe_to_run/docs/safetorunreporting",editUrl:"https://github.com/safetorun/safe_to_run/edit/master/docs/docs/reporting/safe_to_run_reporting.md",tags:[],version:"current",frontMatter:{id:"safetorunreporting",title:"Safe to run reporting",slug:"/safetorunreporting"},sidebar:"someSidebar",previous:{title:"Reporting or default?",permalink:"/safe_to_run/docs/reportingordefault"}},l=[{value:"Errors and Warns",id:"errors-and-warns",children:[],level:3},{value:"Reports",id:"reports",children:[],level:3}],c={toc:l};function f(e){var r=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"errors-and-warns"},"Errors and Warns"),(0,a.kt)("p",null,"Safe to run reporting has the ability to report something as an 'error' or as a 'warning'.\nThis provides the ability for us to fail a check if the error preconditions are not met,\nor simply to return a warning if they do not pass. For example you might want to throw\na runtime exception, or else disable certain features of your app on error, or simply\nlog if you see a warning"),(0,a.kt)("h3",{id:"reports"},"Reports"),(0,a.kt)("p",null,"Safe to run checks return a report. This is a sealed class with the following definition"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"\nsealed class SafeToRunReport {\n    data class SafeToRunReportFailure(val failureReason: String, val failureMessage: String) : SafeToRunReport()\n    data class SafeToRunReportSuccess(val successMessage: String) : SafeToRunReport()\n    data class MultipleReports(val reports: List<SafeToRunReport>) : SafeToRunReport()\n    data class SafeToRunWarning(val warnReason: String, val warningMessage: String) : SafeToRunReport()\n}\n")),(0,a.kt)("p",null,"You can check the result with something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"val safeToRun = SafeToRun.isSafeToRun()\nthrowIfSomethingFailed(safeToRun)\n\nfun throwIfSomethingFailed(safeToRunReport: SafeToRunReport) {\n    when (safeToRunReport) {\n        is SafeToRunReport.MultipleReports -> safeToRunReport.reports.forEach(::throwIfSomethingFailed)\n        is SafeToRunReport.SafeToRunReportFailure -> throw RuntimeException(safeToRunReport.failureMessage)\n        is SafeToRunReport.SafeToRunReportSuccess ->{} // Nothing\n        is SafeToRunReport.SafeToRunWarning -> {} // It's a good idea to log\n    }\n}\n")))}f.isMDXComponent=!0}}]);