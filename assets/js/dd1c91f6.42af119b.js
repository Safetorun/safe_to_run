"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9020],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),f=c(t),d=o,m=f["".concat(u,".").concat(d)]||f[d]||p[d]||a;return t?r.createElement(m,i(i({ref:n},s),{},{components:t})):r.createElement(m,i({ref:n},s))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2906:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return s},default:function(){return f}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],l={id:"reporting_or_default",title:"Reporting or default?",slug:"/reportingordefault"},u=void 0,c={unversionedId:"reporting_or_default",id:"reporting_or_default",title:"Reporting or default?",description:"Safe to run supports two modes of operation. Default and reporting.",source:"@site/docs/reporting_or_default.mdx",sourceDirName:".",slug:"/reportingordefault",permalink:"/safe_to_run/docs/reportingordefault",editUrl:"https://github.com/safetorun/safe_to_run/edit/master/docs/docs/reporting_or_default.mdx",tags:[],version:"current",frontMatter:{id:"reporting_or_default",title:"Reporting or default?",slug:"/reportingordefault"},sidebar:"someSidebar",previous:{title:"Intent verification",permalink:"/safe_to_run/docs/intentverification"},next:{title:"Safe to run reporting",permalink:"/safe_to_run/docs/safetorunreporting"}},s=[{value:"Reporting",id:"reporting",children:[],level:3}],p={toc:s};function f(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Safe to run supports two modes of operation. Default and reporting."),(0,a.kt)("p",null,"The recommended approach is to use the default option. I.e."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"safeToRun(buildSafeToRunCheckList {\n     add {\n        banAvdEmulatorCheck()\n     }\n})\n")),(0,a.kt)("p",null,"It also recommended that if you create a function for this check, that function should also be inlined. E.g."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"private inline fun Context.canIRun(actionOnFailure: () -> Unit) =\n      if (safeToRun(buildSafeToRunCheckList {\n              add {\n                  banAvdEmulatorCheck()\n              }\n       }).invoke()) {\n          actionOnFailure()\n      }\n")),(0,a.kt)("p",null,"And then call this function, e.g. from your fragments or activities:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"canIRun { throw RuntimeException() }\n")),(0,a.kt)("p",null,"It is also recommended that you call this check more than once, in order to make it harder for attackers to reverse\nengineer the application and remove safe to run checks."),(0,a.kt)("h3",{id:"reporting"},"Reporting"),(0,a.kt)("p",null,"Another approach is to use the SafeToRun reporting API. This provides a 'Safe to run report' which contains extra\ninformation about any failures, and is particularly useful for providing error messages to developers about why\na check has failed. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'SafeToRun.init(\n    configure {\n\n        // Root beer (detect root)\n        rootDetection {\n            tolerateBusyBox = true\n        }.error()\n\n        // Black list certain apps\n        blacklistConfiguration {\n            +"com.abc.def"\n            +packageName\n            blacklistRootingApps()\n        }.error()\n\n        verifySignatureConfig("cSP1O3JN/8+Ag14WAOeOEnwAnpY=")\n            .error()\n\n        // OS Blacklist version\n        osDetectionCheck(\n            conditionalBuilder {\n                with(minOsVersion(MIN_OS_VERSION))\n                and(notManufacturer("Abc"))\n                and(bannedModel("bannedModel"))\n            }\n        ).warn()\n\n        osDetectionCheck(\n            conditionalBuilder {\n                with(bannedModel("Pixel 4a (5G)"))\n            }\n        ).warn()\n\n        osDetectionCheck(banBluestacksEmulator()).error()\n\n        installOriginCheckWithDefaults().warn()\n\n        osDetectionCheck(banAvdEmulator()).error()\n        debugCheck().warn()\n    }\n)\n')),(0,a.kt)("p",null,"Then you can run a check from anywhere:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"SafeToRun.isSafeToRun()\n")),(0,a.kt)("p",null,"Whilst this is easier to use and easier to configure, it is also easier for reverse engineers to\nbypass the checks no matter how many times you call ",(0,a.kt)("inlineCode",{parentName:"p"},"isSafeToRun")," an attacker would only need to change\none bit of code to remove all checks"),(0,a.kt)("p",null,"::: tip"),(0,a.kt)("p",null,"Rule of thumb: Use the default check when using SafeToRun."),(0,a.kt)("p",null,":::"))}f.isMDXComponent=!0}}]);