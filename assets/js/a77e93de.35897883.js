"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2977],{3905:function(e,t,n){n.d(t,{Zo:function(){return f},kt:function(){return d}});var i=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,l=function(e,t){if(null==e)return{};var n,i,l={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},f=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,f=o(e,["components","mdxType","originalType","parentName"]),p=c(n),d=l,v=p["".concat(s,".").concat(d)]||p[d]||u[d]||r;return n?i.createElement(v,a(a({ref:t},f),{},{components:n})):i.createElement(v,a({ref:t},f))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,a=new Array(r);a[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,a[1]=o;for(var c=2;c<r;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3561:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return f},default:function(){return p}});var i=n(7462),l=n(3366),r=(n(7294),n(3905)),a=["components"],o={id:"files",title:"File verification",slug:"/filesverification"},s=void 0,c={unversionedId:"input/files",id:"input/files",title:"File verification",description:"Verify files",source:"@site/docs/input/files.md",sourceDirName:"input",slug:"/filesverification",permalink:"/safe_to_run/docs/filesverification",editUrl:"https://github.com/safetorun/safe_to_run/edit/master/docs/docs/input/files.md",tags:[],version:"current",frontMatter:{id:"files",title:"File verification",slug:"/filesverification"},sidebar:"someSidebar",previous:{title:"URL verification",permalink:"/safe_to_run/docs/verifyurls"},next:{title:"Intent verification",permalink:"/safe_to_run/docs/intentverification"}},f=[{value:"Verify files",id:"verify-files",children:[],level:3},{value:"Allow no private apps",id:"allow-no-private-apps",children:[],level:3},{value:"Allow specific private file",id:"allow-specific-private-file",children:[],level:3},{value:"Allow all files in a directory",id:"allow-all-files-in-a-directory",children:[],level:3},{value:"Allow all files and subdirectories",id:"allow-all-files-and-subdirectories",children:[],level:3},{value:"Allow any file",id:"allow-any-file",children:[],level:3}],u={toc:f};function p(e){var t=e.components,n=(0,l.Z)(e,a);return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"verify-files"},"Verify files"),(0,r.kt)("p",null,"Imagine you have written code that looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"if (intent.action == Intent.ACTION_SEND) {\n    val uri = intent.getParcelableExtra<Parcelable>(Intent.EXTRA_STREAM) as Uri\n    sendData(contentResolver.openInputStream(uri))\n}\n")),(0,r.kt)("p",null,"Your application in this case might be at risk of an attack that looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'Intent(Intent.ACTION_SEND).apply {\n    putExtra(\n        Intent.EXTRA_STREAM,\n        Uri.parse("file:///data/data/${it.packageName}/db/sensitive.db")\n    )\n}\n')),(0,r.kt)("p",null,"In this example, we might allow an attacker to send sensitive keys, databases (etc)."),(0,r.kt)("h3",{id:"allow-no-private-apps"},"Allow no private apps"),(0,r.kt)("p",null,"To prevent this type of attack, we can use the verify command in order to check a file\n(or a URI) before opening it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val isFileSafeToOpen = uri.verifyFile(this) {}\n")),(0,r.kt)("p",null,"By default, no files from your private directory is allowed - which is what you want in most cases."),(0,r.kt)("h3",{id:"allow-specific-private-file"},"Allow specific private file"),(0,r.kt)("p",null,"We can allow a specific file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'val isFileSafeToOpen = uri.verifyFile(this) {\n    // This\n    File(context.filesDir + "files/", "safe_to_read.txt").allowExactFile()\n\n    // Is the same as this:\n    addAllowedExactFile(File(context.filesDir + "files/", "safe_to_read.txt"))\n}\n')),(0,r.kt)("h3",{id:"allow-all-files-in-a-directory"},"Allow all files in a directory"),(0,r.kt)("p",null,"Instead of this, we can add a directory and allow all files in that directory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val isFileSafeToOpen = uri.verifyFile(this) {\n    // This\n    addAllowedParentDirectory(context.filesDir.allowDirectory())\n\n    // Is the same as this:\n    FileUriMatcherBuilder.FileUriMatcherCheck(\n        context.filesDir,\n        false\n    )\n}\n")),(0,r.kt)("h3",{id:"allow-all-files-and-subdirectories"},"Allow all files and subdirectories"),(0,r.kt)("p",null,"At the moment ",(0,r.kt)("inlineCode",{parentName:"p"},"/data/data/com.safe.to.run/files/abc.txt")," would be allowed,\nbut ",(0,r.kt)("inlineCode",{parentName:"p"},"/data/data/com.safe.to.run/files/subdir/abc.txt"),"\nwould not. To allow subdirectories:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val isFileSafeToOpen = uri.verifyFile(this) {\n    // This\n    addAllowedParentDirectory(context.filesDir.allowDirectoryAndSubdirectories())\n\n    // Is the same as this:\n    FileUriMatcherBuilder.FileUriMatcherCheck(\n        context.filesDir,\n        true\n    )\n}\n")),(0,r.kt)("h3",{id:"allow-any-file"},"Allow any file"),(0,r.kt)("p",null,"We would not recommend doing this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val isFileSafeToOpen = uri.verifyFile(this) {\n    allowAnyFile = true\n}\n")))}p.isMDXComponent=!0}}]);