(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{115:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return b}));var o=t(0),r=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var f=r.a.createContext({}),u=function(e){var n=r.a.useContext(f),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},d=function(e){var n=u(e.components);return r.a.createElement(f.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},p=r.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,f=s(e,["components","mdxType","originalType","parentName"]),d=u(t),p=o,b=d["".concat(i,".").concat(p)]||d[p]||l[p]||a;return t?r.a.createElement(b,c(c({ref:n},f),{},{components:t})):r.a.createElement(b,c({ref:n},f))}));function b(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var f=2;f<a;f++)i[f]=t[f];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},84:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return s})),t.d(n,"default",(function(){return u}));var o=t(3),r=t(7),a=(t(0),t(115)),i={id:"onoroffdevice",title:"On or off device?",slug:"/onoroffdevice"},c={unversionedId:"onoroffdevice",id:"onoroffdevice",isDocsHomePage:!1,title:"On or off device?",description:"Safe to run offers two modes of operation, it is",source:"@site/docs/onoroffdevice.md",sourceDirName:".",slug:"/onoroffdevice",permalink:"/safe_to_run/docs/onoroffdevice",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/onoroffdevice.md",version:"current",frontMatter:{id:"onoroffdevice",title:"On or off device?",slug:"/onoroffdevice"},sidebar:"someSidebar",previous:{title:"Why Safe to Run?",permalink:"/safe_to_run/docs/"},next:{title:"Getting started",permalink:"/safe_to_run/docs/gettingstarted"}},s=[],f={toc:s};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},f,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Safe to run offers two modes of operation, it is\npossible - recommended even - to use both. "),Object(a.b)("p",null,"The 'on device' mode runs on device, where the checks\nhappen on the device itself. The 'off-device' mode works\nby sending device information to a remote server, and\nthe check is done there. "),Object(a.b)("h1",{id:"pros-and-cons"},"Pros and cons"),Object(a.b)("p",null,"The on device modes' main advantage is that the check can happen\nalmost immediately, and it does not involve a backend system in\norder to run. The disadvantage, is that it is easier for an attacker\nto see what checks are being performed by your service, and they can\nmore easily bypass them. A further advantage of the on-device approach\nis that your backend can make a decision about whether to run a\ncommand - e.g., your backend might refuse to change a password if it's\noperating on a rooted phone, or, if you are writing a banking application\nyou might refuse to send a payment if the phone is considered unsafe"),Object(a.b)("h1",{id:"usage"},"Usage"),Object(a.b)("p",null,"Beyond the setup of the backend (discussed in another section) the difference\nis in the configuration. An example configuration for 'On device' looks like\nthis"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-kotlin"},'SafeToRun.init(\n    configure {\n\n        // Root beer (detect root)\n        rootDetection {\n            tolerateRoot = false\n            tolerateBusyBox = true\n        }.error()\n\n        // Black list certain apps\n        blacklistConfiguration {\n            +"com.abc.def"\n            +packageName\n        }.error()\n        \n        // Etc\n    }\n)\n\nSafeToRun.isSafeToRun()\n')),Object(a.b)("p",null,"Whereas the configuration for off device is done elsewhere, for\nthe application configuration is done like this:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-kotlin"},' val str = safeToRunOffDevice(\n    "https://rygl69bpz0.execute-api.eu-west-1.amazonaws.com/Prod/",\n    "5bzdwZ8Drs1AIsmJAx0M37bndOeEkwbv6pI5fjx1"\n)\n    .isSafeToRun {\n    Log.v("IsSafeToRun", it.signedResult)\n}\n\n// (Note the callback, if you handle your own threading you can call:)\nstr.isSafeToRun()\n')))}u.isMDXComponent=!0}}]);