"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1548],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),f=s(t),d=i,v=f["".concat(c,".").concat(d)]||f[d]||p[d]||a;return t?r.createElement(v,o(o({ref:n},u),{},{components:t})):r.createElement(v,o({ref:n},u))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=f;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},6387:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return f}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=["components"],l={id:"intentverification",title:"Intent verification",slug:"/intentverification"},c=void 0,s={unversionedId:"input/intentverification",id:"input/intentverification",title:"Intent verification",description:"Intent verification is currently still in Beta! Please provide feedback as an",source:"@site/docs/input/intentverification.md",sourceDirName:"input",slug:"/intentverification",permalink:"/safe_to_run/docs/intentverification",editUrl:"https://github.com/safetorun/safe_to_run/edit/master/docs/docs/input/intentverification.md",tags:[],version:"current",frontMatter:{id:"intentverification",title:"Intent verification",slug:"/intentverification"},sidebar:"someSidebar",previous:{title:"File verification",permalink:"/safe_to_run/docs/filesverification"},next:{title:"Reporting or default?",permalink:"/safe_to_run/docs/reportingordefault"}},u=[{value:"The basics",id:"the-basics",children:[],level:3},{value:"Opening URLs",id:"opening-urls",children:[],level:3}],p={toc:u};function f(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Intent verification is currently still in Beta! Please provide feedback as an\nissue ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/safetorun/safe_to_run"},"here")))),(0,a.kt)("p",null,"Intent verification is intended to provide a simple interface for you to protect against attacks on android 'Intents'.\nThe types of vulnerabilities are often complex and subtle."),(0,a.kt)("h3",{id:"the-basics"},"The basics"),(0,a.kt)("p",null,"The basics of the Safe to run intent verification service is to call ",(0,a.kt)("inlineCode",{parentName:"p"},".verify")," on any intent."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"override fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_bouncable)\n\n    // Either do\n    if (intent.verify {\n\n        }) {\n        // Do something \n    } else {\n        // Report failure\n    }\n\n    // Or instead you can do \n\n    intent.verify {\n        actionOnSuccess = {\n            // Do something\n        }\n\n        actionOnFailure = {\n            // Report failure\n        }\n    }\n}\n")),(0,a.kt)("p",null,"Verify is locked down by default to disallow any URLs, and does not\nallow any 'containing' intents - that is, any intents within the bundle"),(0,a.kt)("h3",{id:"opening-urls"},"Opening URLs"),(0,a.kt)("p",null,"By default, a bundle cannot contain any urls:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'val intent = Intent().apply {\n    putStringExtra("url", "https://abc.com")\n}\n\nval result : Boolean = intent.verify { }\n// Equals false\n')),(0,a.kt)("p",null,"If you want to allow a specific host, you can do this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'val intent = Intent().apply {\n    putStringExtra("url", "https://abc.com?abc=def")\n}\n\nval result : Boolean = intent.verify {\n    "https://abc.com?abc=def".allowUrl()\n}\n// Equals true \n')),(0,a.kt)("p",null,"The next best thing, is to white list the host:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'val intent = Intent().apply {\n    putStringExtra("url", "https://abc.com?abc=def")\n}\n\nval result : Boolean = intent.verify {\n    "abc.com".allowHost()\n}\n// Equals true \n')),(0,a.kt)("p",null,"The downside of this approach being that you're no longer entirely\nsure of the specific parameters that may be passed to your URL"),(0,a.kt)("p",null,"The least recommended option is to allow all urls:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'val intent = Intent().apply {\n    putStringExtra("url", "https://abc.com")\n}\n\nval result : Boolean = intent.verify {\n    allowAnyUrls = true\n}\n// Equals true \n')))}f.isMDXComponent=!0}}]);