"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6935],{4289:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"inline-functions","metadata":{"permalink":"/safe_to_run/blog/inline-functions","source":"@site/blog/2021-06-24-inline-functions.md","title":"Secure against de/recompiling android apps","description":"Using kotlin Inline functions to help secure against de/recompiling android apps","date":"2021-06-24T00:00:00.000Z","formattedDate":"June 24, 2021","tags":[{"label":"security","permalink":"/safe_to_run/blog/tags/security"},{"label":"android","permalink":"/safe_to_run/blog/tags/android"},{"label":"safetorun","permalink":"/safe_to_run/blog/tags/safetorun"},{"label":"inline","permalink":"/safe_to_run/blog/tags/inline"},{"label":"decompilation","permalink":"/safe_to_run/blog/tags/decompilation"},{"label":"recompilation","permalink":"/safe_to_run/blog/tags/recompilation"},{"label":"kotlin","permalink":"/safe_to_run/blog/tags/kotlin"}],"readingTime":5.035,"truncated":false,"authors":[{"name":"Daniel Llewellyn","url":"https://github.com/dllewellyn"}],"nextItem":{"title":"Emulator detection","permalink":"/safe_to_run/blog/emulator-detection"}},"content":"### Using kotlin Inline functions to help secure against de/recompiling android apps\\n\\nWhen trying to attack an android application, attackers often try to circumvent some of the protections you\'ve\\nintroduced into your app. For example, you might have a signature check added in order to prevent attackers from adding\\nmalware into your app and republishing it:\\n\\n\\n[Safe to run - signature verification ](https://safetorun.github.io/safe_to_run/docs/signature)\\n\\nThey might also reverse your app to remove any root protection / detection you\'ve added:\\n\\n\\n[Safe to run - root detection](https://safetorun.github.io/safe_to_run/docs/rootdetection)\\n\\n\\nOr they might try to remove any other checks you have added, for example, checks to stop it running on an emulator:\\n\\n\\n[Safe to run - emulator check](https://safetorun.github.io/safe_to_run/docs/emulatorcheck)\\n\\nIn order to make this harder, we can implement these checks using the inline keyword in kotlin. What makes it easy now?\\nTo understand how inlining functions can help, we should first look at how easy it is without inlining. If we take an\\napplication compiled with the \'Safe to run\' reporting checks [Safe to run](https://github.com/safetorun/safe_to_run)\\n\\n### The standard approach\\n\\nLet\'s suppose we add this configuration\\n\\n```kotlin\\nSafeToRun.init(\\n    configure {\\n        osDetectionCheck(banAvdEmulator()).error()\\n    }\\n)\\n```\\n\\nTo our Application or in MainActivity. Then we run one check at launch (in MainActivity onCreate())\\n\\n```kotlin\\nif (SafeToRun.isSafeToRun().anyFailures()) {\\n    throw RuntimeException(\\"Abc\\")\\n}\\n```\\n\\nAnd we also add a button to do a check, let\'s say we have a button like this:\\n\\n```xml\\n<Button android:id=\\"@+id/runSensitiveAction\\"\\n    android:text=\\"Run sensitive action\\"\\n    app:layout_constraintTop_toTopOf=\\"parent\\"\\n    app:layout_constraintStart_toStartOf=\\"parent\\"\\n    app:layout_constraintEnd_toEndOf=\\"parent\\"\\n    android:layout_width=\\"match_parent\\"\\n    android:layout_height=\\"wrap_content\\"/>\\n```\\n\\nAnd program it up like this:\\n\\n```kotlin\\nbinding.runSensitiveAction.setOnClickListener {\\n    if (SafeToRun.isSafeToRun().anyFailures()) {\\n        Toast.makeText(this, \\"Not safe to run\\", Toast.LENGTH_LONG).show()\\n    } else {\\n        Toast.makeText(this, \\"Performed sensitive action!!\\", Toast.LENGTH_LONG).show()\\n    }\\n}\\n```\\n\\nWhen you run the application on an emulator, it will throw an exception. So an attacker might try and take the emulator\\ndetection out - let\'s look at how this application decompiles. We might see something similar to this:\\n\\n```java\\npublic final void invoke(SafeToRunConfiguration $this$configure) {\\n    Intrinsics.checkNotNullParameter($this$configure,\\"$receiver\\");\\n    $this$configure.error(OSDetectionCheckKt.osDetectionCheck(this.this$0,C01051.INSTANCE));\\n}\\n```\\n\\nIf we can identify this single line and remove it, then we\'ll be able to recompile having removed the root detection.\\nLet\'s demonstrate. I\'m using apk tool (full instructions on de/recompiling are a bit out of scope for this article but\\nI\'ll add some of the steps for info):\\n\\n\\n`apktool.sh d app-debug.apk` \\n\\nThis gives me the files as smali. If I look for the line of code doing the config I\'ll see this:\\n\\n```smali\\ncheck-cast v1, Lkotlin/jvm/functions/Function1;\\n\\ninvoke-static {v0, v1}, Lio/github/dllewellyn/safetorun/features/rootdetection/RootDetectionConfigKt;->rootDetection(Landroid/content/Context;Lkotlin/jvm/functions/Function1;)Lio/github/dllewellyn/safetorun/checks/SafeToRunCheck;\\n\\nmove-result-object v0\\n\\n.line 94\\ninvoke-virtual {p1, v0}, Lio/github/dllewellyn/safetorun/SafeToRunConfiguration;->error(Lio/github/dllewellyn/safetorun/checks/SafeToRunCheck;)V\\n```\\n\\nif I remove the final line, it will not run .error() and basically remove the check. So let\'s do that and recompile:\\n\\n\\n`apktool.sh b -f -d app-debug`\\n\\nZipalign the result \\n\\n`./zipalign -v 4 app-debug.apk app-debug-aligned.apk` \\n\\nThen sign (password is android)\\n\\n`apksigner sign --ks ~/.android/debug.keystore output.apk` \\n\\nThen install `adb install app-debug-aligned.apk` and you\'ll see it runs. \\n\\nClick the \'sensitive button\' and the action is performed. \\n\\nThe issue This was a fairly straight forward set of steps to remove our check, because you\'ve removed the\\nconfiguration in a single place, every place that safe to run is called has now been removed. In order to make all of this harder, we\'d ideally want to make it so that if we add two\\nchecks, it takes double the effort to remove them (and three checks triple.. etc etc). \\n\\nInlining In SafeToRun 1.0.3 we have introduced a new function which uses inline functions to make de/recompilation harder. \\nAs a reminder, in usual compilation when you call a function, the compiled code looks similar to your un-compiled code - \\nin the sense that it has a reference to that function, and jumps to where that function is in the binary. When we Inline a \\nfunction, the whole function you\'re calling is copied inside the calling function at compile time. \\n\\n### Inlined function \\n\\nLet\'s add this function to MainActivity:\\n\\n```kotlin\\nprivate inline fun canIRun(actionOnFailure: () -> Unit) {\\n    if (safeToRun(buildSafeToRunCheckList {\\n            add {\\n                banAvdEmulatorCheck()\\n            }\\n        })()) {\\n        actionOnFailure()\\n    }\\n}\\n```\\n\\nOne thing to note is that the syntax for the inlined versioning of Safe to Run is still in active development at the\\ntime of writing, be sure to check the documentation for the most up-to-date syntax If also add this block of code into\\nthe button click, and also into onCreate for MainActivity:\\n\\n```kotlin\\ncanIRun { throw RuntimeException(\\"Error with safe to run\\") }\\n```\\n\\nWe\'ll repeat the compilation and recompilation stage. After a bit of digging, I found something that looks like this:\\n\\n```smali\\n.method public bridge synthetic invoke()Ljava/lang/Object;\\n.locals 1\\n\\ninvoke-virtual {p0}, Lcom/andro/secure/MainActivity$canIRun$$inlined$safeToRun$2;->invoke()Z\\n\\nmove-result v0\\n\\ninvoke-static {v0}, Ljava/lang/Boolean;->valueOf(Z)Ljava/lang/Boolean;\\n\\nmove-result-object v0\\n\\nreturn-object v0\\n\\n.end method\\n```\\n\\nand I replaced it with this code:\\n\\n```smali\\n.method public bridge synthetic invoke()Ljava/lang/Object;\\n.locals 1\\n\\ninvoke-virtual {p0}, Lcom/andro/secure/MainActivity$canIRun$$inlined$safeToRun$2;->invoke()Z\\n\\nmove-result v0\\n\\ninvoke-static {v0}, Ljava/lang/Boolean;->valueOf(Z)Ljava/lang/Boolean;\\n\\nmove-result-object v0\\n\\nconst v0, 0\\n\\ninvoke-static {v0}, Ljava/lang/Boolean;->valueOf(Z)Ljava/lang/Boolean;\\n\\nmove-result-object v0\\n\\nreturn-object v0\\n.end method\\n\\n```\\n\\nAll this does is returns \'false\' (i.e. the check returns false in the inlined version we return a boolean indicating\\ntrue if a check failed rather than a SafeToRunReport)\\n\\nIf we recompile using the same steps as before, you\'ll find that the app runs. However, clicking the button will still\\ncause a RuntimeException. The reason is that the entire functions call chain is duplicated inside the button click. This\\nadds some size to the binary but now an attacker would need to find the function in every place where you have called \'\\ncanIRun\' making the job much harder. \\n\\n\\n### Conclusions \\nIn this article we\'ve demonstrated that by using inline functions (for\\nthe entire chain) and no classes etc, it is exponentially more difficult to remove device safety checks the more checks\\nyou add. \\n\\nIf you were to add a single check at runtime, it would not be any more difficult - however if you litter your\\ncode with Safe to run checks, you will find it harder to decompile and remove those checks. As ever, it\'s\\nimpossible to have a foolproof way of preventing re/decompiling due to the nature of the problem - but inlining functions\\nin this way can help make it harder for an attacker"},{"id":"emulator-detection","metadata":{"permalink":"/safe_to_run/blog/emulator-detection","source":"@site/blog/2021-06-23-emulator-detection.md","title":"Emulator detection","description":"Use safe to run to detect emulators on Android","date":"2021-06-23T00:00:00.000Z","formattedDate":"June 23, 2021","tags":[{"label":"security","permalink":"/safe_to_run/blog/tags/security"},{"label":"android","permalink":"/safe_to_run/blog/tags/android"},{"label":"safetorun","permalink":"/safe_to_run/blog/tags/safetorun"},{"label":"emulator detection","permalink":"/safe_to_run/blog/tags/emulator-detection"},{"label":"kotlin","permalink":"/safe_to_run/blog/tags/kotlin"}],"readingTime":2.54,"truncated":false,"authors":[{"name":"Daniel Llewellyn","url":"https://github.com/dllewellyn"}],"prevItem":{"title":"Secure against de/recompiling android apps","permalink":"/safe_to_run/blog/inline-functions"},"nextItem":{"title":"Secure android apps with Safe to run","permalink":"/safe_to_run/blog/safe-to-run"}},"content":"## Emulator detection with safe to run\\n\\n### What?\\n\\nEmulator detection is the ability to tell when your application is running on an emulator rather than a real device, but why would you want to do this?\\n\\n\\n### Why?\\n\\nReverse engineers, pentesters and hackers tend to like running your app on an emulator can be make it far easier reveal what your application is doing. A somewhat convoluted example is looking at an application\u2019s files in their private directory. For example:\\n\\nIn that case, we can see that by preventing our app running on an emulated device, it can make it more difficult for a penetration tester to observe our application.\\n\\n### How?\\nWe\u2019re going to use the library Safe to run for both the detection and to help identify the emulator.\\n\\nCore Safe to run (android library) The purpose of this configuration is to provide a simple and extensible framework\\n\\nSafe to run has a utility to show device information:\\n\\n`Log.v(\\"Device information\\", deviceInformation().toString())`\\n\\nIf we run this into application on the Android emulator, it looks like this:\\n\\n`DeviceInformation(osCheck=OsCheck(osVersion=30, manufacturer=Google, model=sdk_gphone_x86, board=goldfish_x86, bootloader=unknown, cpuAbi=[x86, armeabi-v7a, armeabi], host=abfarm-us-west1-c-0089, hardware=ranchu, device=generic_x86_arm), installOrigin=InstallOrigin(installOriginPackageName=), signatureVerification=SignatureInformation(signature=))`\\n\\nAnd just to double check with another emulator we get this result\\n\\n`DeviceInformation(osCheck=OsCheck(osVersion=30, manufacturer=Google, model=sdk_gphone_x86_arm, board=goldfish_x86, bootloader=unknown, cpuAbi=[x86, armeabi-v7a, armeabi], host=abfarm-us-west1-c-0007, hardware=ranchu, device=generic_x86_arm), installOrigin=InstallOrigin(installOriginPackageName=), signatureVerification=SignatureInformation(signature=))`\\n\\nThere\u2019s da few things we could pick out here, but in particular we can probably start to build up this as an emulator check. We\u2019ll write up a configuration for safe to run:\\n\\n```kotlin\\nSafeToRun.init(\\n    configure {\\n        osDetectionCheck(\\n            conditionalBuilder {\\n                with(bannedBootloader(\\"unknown\\"))\\n                and(bannedDevice(\\"generic_x86_arm\\"))\\n                and(bannedBoard(\\"goldfish_x86\\"))\\n            }\\n        ).error()\\n    }\\n)\\nLog.v(\\"SafeToRunResult\\", SafeToRun.isSafeToRun().toString())\\n```\\nThis check will result in the following failure\\n\\n`MultipleReports(reports=[MultipleReports(reports=[SafeToRunReportFailure(failureReason=os-config-failure, failureMessage=Banned bootloader unknown == unknown)])])`\\nGenymotion\\nAnother popular emulator is GenyMotion. If we go to the cloud GenyMotion, we can test our experiments on devices there. After connecting and installing out devices, we can have a look again at the deviceInformation() output\\nGenymotion Cloud SaaS\\nEdit description\\ncloud.geny.io\\n\\n`DeviceInformation(osCheck=OsCheck(osVersion=28, manufacturer=Genymotion, model=Huawei P30 Pro, board=unknown, bootloader=unknown, cpuAbi=[x86], host=68d6ec695a7c, hardware=vbox86, device=vbox86p), installOrigin=InstallOrigin(installOriginPackageName=), signatureVerification=SignatureInformation(signature=))\\n\\nEasy peasy, we can create a new rule for Genymotion:\\n\\n```kotlin\\nosDetectionCheck(conditionalBuilder {\\n    with(bannedBoard(\\"unknown\\"))\\n    and(notManufacturer(\\"Genymotion\\"))\\n    and(bannedBootloader(\\"unknown\\"))\\n}).error()\\n```\\n\\nBluestacks\\nAnother popular emulator is bluestacks. After installing and running it, we get this:\\n\\n`DeviceInformation(osCheck=OsCheck(osVersion=25, manufacturer=samsung, model=SM-G955F, board=universal8895, bootloader=unknown, cpuAbi=[x86_64, x86, arm64-v8a, armeabi-v7a, armeabi], host=Build2, hardware=samsungexynos8895, device=dream2lte), installOrigin=InstallOrigin(installOriginPackageName=), signatureVerification=SignatureInformation(signature=))`\\n\\nThis is actually a tricky one for now because the rest of the description is very similar to a real device that we wouldn\u2019t want to block. We can safely use this rule for bluestacks though:\\n\\n`with(bannedBootloader(OsCheckConstants.UNKNOWN))`\\n\\nMaking it easier\\nFrom 1.0.2 onwards, Safe to run provides two utility functions for these two emulators (more coming soon)\\n\\n```kotlin\\nSafeToRun.init {\\n    osDetectionCheck(banAvdEmulator()).error()\\n    osDetectionCheck(banGenymotionEmulator()).error()\\n    osDetectionCheck(banBluestacksEmulator()).error()\\n}\\n```\\n\\n### Conclusion\\n\\nHopefully that gives us an idea of how we can perform emulator detection on Android, Safe to run provides a number of ways of checking for device information so you can tweak parameters for emulator detection \u2014 naturally there are a plenty of emulators we\u2019e not discussed here that you might want to write a check for.\\nEnjoy"},{"id":"safe-to-run","metadata":{"permalink":"/safe_to_run/blog/safe-to-run","source":"@site/blog/2021-06-22-safe-to-run.md","title":"Secure android apps with Safe to run","description":"No library or app can guarantee not running on a rooted phone because of the nature of rooted phones, and any tamper detection could be removed or changed in reality \u2014 this app should work with most attackers, and make it hard enough to make it not worth it for many others.","date":"2021-06-22T00:00:00.000Z","formattedDate":"June 22, 2021","tags":[{"label":"security","permalink":"/safe_to_run/blog/tags/security"},{"label":"android","permalink":"/safe_to_run/blog/tags/android"},{"label":"safetorun","permalink":"/safe_to_run/blog/tags/safetorun"},{"label":"kotlin","permalink":"/safe_to_run/blog/tags/kotlin"}],"readingTime":1.54,"truncated":false,"authors":[{"name":"Daniel Llewellyn","url":"https://github.com/dllewellyn"}],"prevItem":{"title":"Emulator detection","permalink":"/safe_to_run/blog/emulator-detection"}},"content":":::danger \\n\\nNo library or app can guarantee not running on a rooted phone because of the nature of rooted phones, and any tamper detection could be removed or changed in reality \u2014 this app should work with most attackers, and make it hard enough to make it not worth it for many others.\\nBackground\\n\\n::: \\n\\nSafe to run is intended to provide a layer of security for Android applications from rooted phones, reverse engineering, binary modification, malicious apps and some security vulnerabilities.\\n\\nIn principle, you set the parameters for a safe device, (one where the debugger is not attached, one with a minimum OS version, one not rooted etc) and ask \u2018is it safe to run\u2019.\\n\\nYou know best the time and place to ask the question-maybe you do it on app launch and throw an exception, maybe you ask when some tries to make a payment to someone else and reject the payment or maybe you do it before retrieving some data from the backend.\\n\\n### Checks\\nWe have the following checks that are configurable in safe to run\\n\\n* Signature checks \u2014 check the signature of the binary (set multiple for multiple certs)\\n* Debug check \u2014 check if the debugger is attached or if the app is debuggable\\n* Device check \u2014 blacklist a combination of OS version and device manufacturer\\n* Root check \u2014 check for signs which point to the device being rooted\\n* Other packages check \u2014 check for the presence of other packages, e.g. You might not want to run if you know a specific app is running because it\u2019s known malware that might attack your app\\n* Install origin check \u2014 check for the installing package of your app, this can help to make reverse engineering harder\\n\\n### Sample usage\\n\\nEvery time you want to run a check execute:\\n\\n```SafeToRun.safeToRun()```"}]}')}}]);